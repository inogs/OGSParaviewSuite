<ServerManagerConfiguration>
    <!-- declare a view -->
    <ProxyGroup name="views">
        <OGSVerticalProfilePlotProxy name="OGSVerticalProfilePlot" 
                                     class="vtkOGSVerticalProfilePlot"
                                     label="OGS Vertical Profile Plot"
                                     processes="client|dataserver|renderserver"
                                     base_proxygroup="internal_views"
                                     base_proxyname="ViewBase"
                                     representation_name="PythonRepresentation">

               <!-- EXPOSED PROPERTIES TO MODIFY THE PLOT -->

               <!-- Variables Properties -->
               <StringVectorProperty name="Variables"
                                     label="Variables"
                                     command="SetVariables"
                                     default_values=""
                                     number_of_elements="1"
                                     panel_visibility="advanced">
                 <Documentation>
                    Leave this field EMPTY to plot all the variables.

                    Variables can be selected by writing, one at each line, 
                    the name of the variable followed by the view number and
                    optionally followed by the line-specs.

                    e.g. Ac;1;k--;label = Alboran

                    plots variable Ac of the first visible object on black color
                    and dashed lines.
                 </Documentation>
                 <Hints>
                   <Widget type="multi_line"/>
                 </Hints>
               </StringVectorProperty>

               <PropertyGroup label="Selection of Variables"
                              panel_visibility="advanced">
                 <Property name="Variables"/>
               </PropertyGroup>

               <!-- Title Properties-->
               <StringVectorProperty name="pplot_title"
                                     initial_string="pplot_title"
                                     label="Title "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the title for the plot.
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="pplot_title_font"
                                  initial_string="pplot_title_font"
                                  command="SetParameter"
                                  default_values="14"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="pplot_title_bold"
                                  initial_string="pplot_title_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="pplot_title_ital"
                                  initial_string="pplot_title_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="pplot_title_alig"
                                  initial_string="pplot_title_alig"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <EnumerationDomain name="enum">
                   <Entry text="Left"   value="0" />
                   <Entry text="Center" value="1" />
                   <Entry text="Right"  value="2" />
                 </EnumerationDomain>
               </IntVectorProperty>

               <PropertyGroup label="Title">
                 <Property name="pplot_title"/>
               </PropertyGroup>
               <PropertyGroup label="Title Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="pplot_title_font" function="Size"/>
                 <Property name="pplot_title_bold" function="Bold"/>
                 <Property name="pplot_title_ital" function="Italics"/>
                 <Property name="pplot_title_alig" function="Justification"/>
               </PropertyGroup>

               <!-- Legend Properties -->
               <IntVectorProperty name="pshow_legend"
                                  label="Show Legend"
                                  initial_string="pshow_legend"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                   Activate/Deactivate the legend.
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="plegend_location"
                                  label="Legend Location"
                                  initial_string="plegend_location"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <EnumerationDomain name="enum">
                  <Entry text="Best"        value="0"  />
                  <Entry text="UpperRight"  value="1"  />
                  <Entry text="UpperLeft"   value="2"  />
                  <Entry text="LowerLeft"   value="3"  />
                  <Entry text="LowerRight"  value="4"  />
                  <Entry text="Right"       value="5"  />
                  <Entry text="CenterLeft"  value="6"  />
                  <Entry text="CenterRight" value="7"  />
                  <Entry text="LowerCenter" value="8"  />
                  <Entry text="UpperCenter" value="9"  />
                  <Entry text="Center"      value="10" />
                </EnumerationDomain>
               </IntVectorProperty>

               <IntVectorProperty name="plegend_font"
                                  initial_string="plegend_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the legend font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="plegend_bold"
                                  initial_string="plegend_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the legend font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="plegend_ital"
                                  initial_string="plegend_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the legend font to italics.
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <PropertyGroup label="Annotation">
                 <Property name="pshow_legend"/>
                 <Property name="plegend_location"/>
               </PropertyGroup>

               <PropertyGroup label="Legend Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="plegend_font" function="Size"/>
                 <Property name="plegend_bold" function="Bold"/>
                 <Property name="plegend_ital" function="Italics"/>
               </PropertyGroup>

               <!-- Axes Properties -->
               <IntVectorProperty name="pshow_grid"
                                  label="Show Grid"
                                  initial_string="pshow_grid"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                   Activate/Deactivate the plot grid.
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="pminorticks"
                                  label="Show Minor Ticks"
                                  initial_string="pminorticks"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <Documentation>
                   Activate/Deactivate the minor ticks.
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <DoubleVectorProperty name="plinewidth"
                                     label="Line width "
                                     initial_string="plinewidth"
                                     command="SetParameter"
                                     default_values="1"
                                     number_of_elements="1">
                 <Documentation>
                   Width of the line in the plot.
                 </Documentation>
               </DoubleVectorProperty>

               <IntVectorProperty name="psmoothdata"
                                  label="Smooth curves"
                                  initial_string="psmoothdata"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <Documentation>
                   Use a spline interpolation to smooth the curves
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="psmoothorder"
                                  initial_string="psmoothorder"
                                  label="Smooth Order"
                                  command="SetParameter"
                                  default_values="5"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <Documentation>
                  Set the order for the data smoothing. Default is 5.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="psmoothdata" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </IntVectorProperty>

               <IntVectorProperty name="pfilterzeros"
                                  label="Filter Zero Values"
                                  initial_string="pfilterzeros"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <Documentation>
                   Erases values that are equal to 0 in the plot
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <PropertyGroup label="Axes">
                 <Property name="pshow_grid"/>
                 <Property name="pminorticks"/>
                 <Property name="plinewidth"/>
                 <Property name="psmoothdata"/>
                 <Property name="psmoothorder"/>
                 <Property name="pfilterzeros"/>
               </PropertyGroup>

               <!-- X Axis Properties -->
               <StringVectorProperty name="px_label"
                                     initial_string="px_label"
                                     label="X Label "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the X axis label for the plot
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="px_font"
                                  initial_string="px_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="px_bold"
                                  initial_string="px_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="px_ital"
                                  initial_string="px_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="px_logscale"
                                  initial_string="px_logscale"
                                  label="Logarithmic Scale"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis to use a logarithmic scale.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="px_customrange"
                                  initial_string="px_customrange"
                                  label="Custom Range X"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set a custom range for the X axis.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <DoubleVectorProperty name="px_min"
                                     initial_string="px_min"
                                     label="Minimum Range X"
                                     command="SetParameter"
                                     default_values="0"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range minimum for the X axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="px_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <DoubleVectorProperty name="px_max"
                                     initial_string="px_max"
                                     label="Maximum Range X"
                                     command="SetParameter"
                                     default_values="1"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range maximum for the X axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="px_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <PropertyGroup label="X Axis">
                 <Property name="px_label"/>
               </PropertyGroup>

               <PropertyGroup label="X Axis Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="px_font" function="Size"/>
                 <Property name="px_bold" function="Bold"/>
                 <Property name="px_ital" function="Italics"/>
               </PropertyGroup>

               <PropertyGroup label="X Axis Range">
                 <Property name="px_logscale"/>
                 <Property name="px_customrange"/>
                 <Property name="px_min"/>
                 <Property name="px_max"/>
               </PropertyGroup>

               <!-- Y axis label -->
               <StringVectorProperty name="py_label"
                                     initial_string="py_label"
                                     label="Y Label "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the Y axis label for the plot
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="py_font"
                                  initial_string="py_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="py_bold"
                                  initial_string="py_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="py_ital"
                                  initial_string="py_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="py_logscale"
                                  initial_string="py_logscale"
                                  label="Logarithmic Scale"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis to use a logarithmic scale.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="py_customrange"
                                  initial_string="py_customrange"
                                  label="Custom Range Y"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set a custom range for the Y axis.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <DoubleVectorProperty name="py_min"
                                     initial_string="py_min"
                                     label="Minimum Range Y"
                                     command="SetParameter"
                                     default_values="0"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range minimum for the Y axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="py_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <DoubleVectorProperty name="py_max"
                                     initial_string="py_max"
                                     label="Maximum Range Y"
                                     command="SetParameter"
                                     default_values="1"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range maximum for the Y axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="py_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <PropertyGroup label="Y Axis">
                 <Property name="py_label"/>
               </PropertyGroup>

               <PropertyGroup label="Y Axis Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="py_font" function="Size"/>
                 <Property name="py_bold" function="Bold"/>
                 <Property name="py_ital" function="Italics"/>
               </PropertyGroup>

               <PropertyGroup label="Y Axis Range">
                 <Property name="py_logscale"/>
                 <Property name="py_customrange"/>
                 <Property name="py_min"/>
                 <Property name="py_max"/>
               </PropertyGroup>

               <!-- Save figure properties -->
               <IntVectorProperty name="psavefigure"
                                  initial_string="psavefigure"
                                  label="Save Figure"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Indicate whether or not to save the plot
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <StringVectorProperty animateable="0"
                                     command="SetParameter"
                                     name="pfilename"
                                     initial_string="pfilename"
                                     label="File Name"
                                     default_values=""
                                     number_of_elements="1">
                   <FileListDomain name="files" />
                   <Documentation>
                      This property sets the name of the output file to save
                   </Documentation>
                   <Hints>
                      <PropertyWidgetDecorator type="ShowWidgetDecorator">
                        <Property name="psavefigure" function="boolean" />
                      </PropertyWidgetDecorator>
                      <FileChooser extensions="png" file_description="High quality PNG"/>
                      <FileChooser extensions="pdf" file_description="Vectorized PDF"/>
                      <FileChooser extensions="eps" file_description="Vectorized EPS"/>
                      <AcceptAnyFile/>    
                   </Hints>
               </StringVectorProperty>

               <DoubleVectorProperty name="poutdpi"
                                     initial_string="poutdpi"
                                     label="Output DPI "
                                     command="SetParameter"
                                     default_values="300"
                                     number_of_elements="1">
                 <Documentation>
                  Set the dpi (depth per inch) of the output figure
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="psavefigure" function="boolean" />
                   </PropertyWidgetDecorator>        
                 </Hints>
               </DoubleVectorProperty>

               <PropertyGroup label="Save Fiure">
                 <Property name="psavefigure"/>
                 <Property name="pfilename"/>
                 <Property name="poutdpi"/>
               </PropertyGroup>

               <!-- PLOT PYTHON CODE -->

               <StringVectorProperty command="SetScript"
                                     name="Script"
                                     default_values="def setup_data(view):&#xA;&#x9;'''&#xA;&#x9;This function sets up the data to be plotted.&#xA;&#x9;'''&#xA;&#x9;view.EnableAllAttributeArrays()&#xA;def render(view,width,height):&#xA;&#x9;'''&#xA;&#x9;This function decides the type of plot according &#xA;&#x9;to the view type.&#xA;&#xA;&#x9;Needs to be updated every time a plot view is created.&#xA;&#x9;'''&#xA;&#x9;view_type = view.GetClassName()&#xA;&#x9;# Vertical plot&#xA;&#x9;if view_type == &quot;vtkOGSVerticalProfilePlot&quot;:&#xA;&#x9;&#x9;return render_verticalplot(view, width, height)&#xA;&#x9;# Hovmoeller plot&#xA;&#x9;if view_type == &quot;vtkOGSHovmoellerPlot&quot;:&#xA;&#x9;&#x9;return render_hovmoellerplot(view, width, height)&#xA;&#x9;# Spaghetti plot&#xA;&#x9;if view_type == &quot;vtkOGSSpaghettiPlot&quot;:&#xA;&#x9;&#x9;return render_spaghettiplot(view, width, height)&#xA;&#x9;return None&#xA;def smooth(a,WSZ):&#xA;&#x9;'''&#xA;&#x9;Smoothes a 1-D numpy array.&#xA;&#xA;&#x9;WSZ: smoothing window size needs, which must be odd number,&#xA;&#x9;as in the original MATLAB implementation.&#xA;&#x9;'''&#xA;&#x9;import numpy as np&#xA;&#x9;out0  = np.convolve(a,np.ones(WSZ,dtype=int),'valid')/WSZ    &#xA;&#x9;r     = np.arange(1,WSZ-1,2)&#xA;&#x9;start = np.cumsum(a[:WSZ-1])[::2]/r&#xA;&#x9;stop  = (np.cumsum(a[:-WSZ:-1])[::2]/r)[::-1]&#xA;&#x9;return np.concatenate((  start , out0, stop  ))&#xA;def render_verticalplot(view, width, height):&#xA;&#x9;'''&#xA;&#x9;Performs vertical plots from data.&#xA;&#x9;'''&#xA;&#x9;from paraview import python_view&#xA;&#xA;&#x9;import vtk, numpy as np&#xA;&#x9;from vtk.util import numpy_support as npvtk&#xA;&#xA;&#x9;# Create matplotlib figure&#xA;&#x9;figure = python_view.matplotlib_figure(width, height)&#xA;&#xA;&#x9;# Set up the plot view&#xA;&#x9;ax = figure.add_subplot(1,1,1)&#xA;&#x9;# Title properties&#xA;&#x9;title_loc = 'center'&#xA;&#x9;if pplot_title_alig == 0:&#xA;&#x9;&#x9;title_loc = 'left'&#xA;&#x9;if pplot_title_alig == 2:&#xA;&#x9;&#x9;title_loc = 'right'&#xA;&#x9;ax.set_title(pplot_title,&#xA;&#x9;&#x9;fontsize=pplot_title_font,&#xA;&#x9;&#x9;fontweight='bold'    if pplot_title_bold else None,&#xA;&#x9;&#x9;style='italic'  if pplot_title_ital else None,&#xA;&#x9;&#x9;loc=title_loc)&#xA;&#x9;# X Axes properties&#xA;&#x9;ax.set_xlabel(px_label,&#xA;&#x9;&#x9;fontsize=px_font,&#xA;&#x9;&#x9;fontweight='bold' if px_bold else None,&#xA;&#x9;&#x9;style='italic' if px_ital else None)&#xA;&#x9;if px_logscale: ax.set_xscale('log')&#xA;&#x9;if px_customrange: ax.set_xlim((px_min,px_max))&#xA;&#x9;# Y Axes properties&#xA;&#x9;ax.set_ylabel(py_label,&#xA;&#x9;&#x9;fontsize=py_font,&#xA;&#x9;&#x9;fontweight='bold' if py_bold else None,&#xA;&#x9;&#x9;style='italic' if py_ital else None)&#xA;&#x9;if py_logscale: ax.set_yscale('log')&#xA;&#x9;if py_customrange: ax.set_ylim((py_min,py_max))&#xA;&#xA;&#x9;if pminorticks: ax.minorticks_on()&#xA;&#x9;if pshow_grid: ax.grid()&#xA;&#xA;&#x9;# Generate variable lists&#xA;&#x9;objlist = [s.split(';')[1] for s in variables.split('\n')] if not variables == '' else []&#xA;&#x9;varlist = [s.split(';')[0] for s in variables.split('\n')] if not variables == '' else []&#xA;&#xA;&#x9;# Plot data&#xA;&#x9;for objId in range(view.GetNumberOfVisibleDataObjects()):&#xA;&#x9;&#x9;obj = view.GetVisibleDataObjectForRendering(objId)&#xA;&#x9;&#x9;# Recover the depth&#xA;&#x9;&#x9;dfact = float(obj.GetFieldData().GetAbstractArray('Metadata').GetValue(2))&#xA;&#x9;&#x9;z     = npvtk.vtk_to_numpy(obj.GetPoints().GetData())[:,2]/dfact&#xA;&#x9;&#x9;# For each variable, decide if the plot is needed&#xA;&#x9;&#x9;for varId in range(obj.GetPointData().GetNumberOfArrays()):         &#xA;&#x9;&#x9;&#x9;varname = obj.GetPointData().GetArray(varId).GetName()&#xA;&#x9;&#x9;&#x9;# Filter some variables (Do not plot them)&#xA;&#x9;&#x9;&#x9;if varname == 'basins mask':       continue&#xA;&#x9;&#x9;&#x9;if varname == 'coast mask':        continue&#xA;&#x9;&#x9;&#x9;if varname == 'e1':                continue&#xA;&#x9;&#x9;&#x9;if varname == 'e2':                continue&#xA;&#x9;&#x9;&#x9;if varname == 'e3':                continue&#xA;&#x9;&#x9;&#x9;if varname == 'vtkValidPointMask': continue&#xA;&#x9;&#x9;&#x9;# Decide whether to plot the variable&#xA;&#x9;&#x9;&#x9;do_plot = False if len(varlist) &gt; 0 else True&#xA;&#x9;&#x9;&#x9;args    = None&#xA;&#x9;&#x9;&#x9;kwargs  = None&#xA;&#x9;&#x9;&#x9;for ii in range(0,len(varlist)):&#xA;&#x9;&#x9;&#x9;&#x9;if &quot;%s %d&quot; % (varname,objId+1) == &quot;%s %s&quot; % (varlist[ii],objlist[ii]): &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;do_plot = True&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (len(variables.split('\n')[ii].split(';'))&gt;2):&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;args = variables.split('\n')[ii].split(';')[2]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (len(variables.split('\n')[ii].split(';'))&gt;3):&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;kwargs = dict(s.split('=') for s in variables.split('\n')[ii].split(';')[3].split(','))&#xA;&#x9;&#x9;&#x9;# Plot&#xA;&#x9;&#x9;&#x9;if do_plot:&#xA;&#x9;&#x9;&#x9;&#x9;var = npvtk.vtk_to_numpy(obj.GetPointData().GetArray(varname))&#xA;&#x9;&#x9;&#x9;&#x9;# Filter zeros inside &#xA;&#x9;&#x9;&#x9;&#x9;if pfilterzeros: var[var == 0.] = None&#xA;&#x9;&#x9;&#x9;&#x9;# Algorithm to smooth data&#xA;&#x9;&#x9;&#x9;&#x9;if psmoothdata: var = smooth(var,psmoothorder)&#xA;&#x9;&#x9;&#x9;&#x9;# Plot&#xA;&#x9;&#x9;&#x9;&#x9;if args == None:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ax.plot(var,-z,label=varname,linewidth=plinewidth)&#xA;&#x9;&#x9;&#x9;&#x9;elif kwargs == None:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ax.plot(var,-z,args,label=varname,linewidth=plinewidth)&#xA;&#x9;&#x9;&#x9;&#x9;else:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;kwargs['linewidth'] = plinewidth&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ax.plot(var,-z,args,**kwargs)&#xA;&#xA;&#x9;# Invert the Y axis&#xA;&#x9;ax.invert_yaxis()&#xA;&#xA;&#x9;# Set tick size&#xA;&#x9;ax.tick_params(axis='x', which='major', labelsize=px_font)&#xA;&#x9;ax.tick_params(axis='y', which='major', labelsize=py_font)&#xA;&#xA;&#x9;# Set legend&#xA;&#x9;if pshow_legend: &#xA;&#x9;&#x9;legend_prop = dict(size=plegend_font)&#xA;&#x9;&#x9;if plegend_bold: legend_prop['weight'] = 'bold'&#xA;&#x9;&#x9;if plegend_ital: legend_prop['style']  = 'italic'&#xA;&#x9;&#x9;ax.legend(loc=plegend_location,prop=legend_prop)&#xA;&#xA;&#x9;if psavefigure and pfilename:&#xA;&#x9;&#x9;figure.savefig(pfilename,dpi=poutdpi,bbox_inches='tight')&#xA;&#xA;&#x9;return python_view.figure_to_image(figure)&#xA;"
                                     number_of_elements="1"
                                     panel_visibility="never">
                 <Hints>
                   <Widget type="multi_line" syntax="python"/>
                 </Hints>
                 <Documentation>This property contains the text of a Python program used
                 to generate a plot. Use the TAB key to end editing and generate the
                 plot.</Documentation>
               </StringVectorProperty>

               <!-- OTHER EXPOSED PROPERTIES -->

               <IntVectorProperty command="GetNumberOfVisibleDataObjects"
                                  name="NumberOfVisibleDataObjects"
                                  number_of_elements="1"
                                  default_values="1"
                                  information_only="1"
                                  panel_visibility="never">
           <SimpleIntInformationHelper/>
               </IntVectorProperty>
              <IntVectorProperty command="SetForceUseCache"
                                 default_values="0"
                                 is_internal="1"
                                 name="ForceUseCache"
                                 number_of_elements="1">
                <BooleanDomain name="bool" />
                <Documentation>Typically UseCache and CacheKey are updated by the View
                and representations cache based on what the view tells it. However in
                some cases we may want to force a representation to cache irrespective
                of the view (e.g. comparative views). In which case these ivars can up
                set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
                Instead, ForcedCacheKey is used.</Documentation>
              </IntVectorProperty>
              <DoubleVectorProperty command="SetForcedCacheKey"
                                    default_values="none"
                                    is_internal="1"
                                    name="ForcedCacheKey"
                                    number_of_elements="1">
                <DoubleRangeDomain name="range" />
                <Documentation>Typically UseCache and CacheKey are updated by the View
                and representations cache based on what the view tells it. However in
                some cases we may want to force a representation to cache irrespective
                of the view (e.g. comparative views). In which case these ivars can up
                set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
                Instead, ForcedCacheKey is used.</Documentation>
              </DoubleVectorProperty>

        </OGSVerticalProfilePlotProxy>

        <OGSSpaghettiPlotProxy name="OGSSpaghettiPlot" 
                               class="vtkOGSSpaghettiPlot"
                               label="OGS Spaghetti Plot"
                               processes="client|dataserver|renderserver"
                               base_proxygroup="internal_views"
                               base_proxyname="ViewBase"
                               representation_name="PythonRepresentation">

               <!-- EXPOSED PROPERTIES TO MODIFY THE PLOT -->

               <!-- Title Properties-->
               <StringVectorProperty name="splot_title"
                                     initial_string="splot_title"
                                     label="Title "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the title for the plot.
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="splot_title_font"
                                  initial_string="splot_title_font"
                                  command="SetParameter"
                                  default_values="14"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="splot_title_bold"
                                  initial_string="splot_title_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="splot_title_ital"
                                  initial_string="splot_title_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="splot_title_alig"
                                  initial_string="splot_title_alig"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <EnumerationDomain name="enum">
                   <Entry text="Left"   value="0" />
                   <Entry text="Center" value="1" />
                   <Entry text="Right"  value="2" />
                 </EnumerationDomain>
               </IntVectorProperty>

               <PropertyGroup label="Title">
                 <Property name="splot_title"/>
               </PropertyGroup>
               <PropertyGroup label="Title Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="splot_title_font" function="Size"/>
                 <Property name="splot_title_bold" function="Bold"/>
                 <Property name="splot_title_ital" function="Italics"/>
                 <Property name="splot_title_alig" function="Justification"/>
               </PropertyGroup>

               <!-- Plot Properties -->
               <StringVectorProperty name="Variables"
                                     label="Labels"
                                     command="SetVariables"
                                     default_values=""
                                     number_of_elements="1"
                                     panel_visibility="advanced">
                 <Documentation>
                    Labels can be specified by writing, one at each line, 
                    the view number followed by the line-specs.

                    e.g. 1;k--;label = Alboran

                    sets the first visible object on black color and dashed 
                    lines, with Alboran as label.
                 </Documentation>
                 <Hints>
                   <Widget type="multi_line"/>
                 </Hints>
               </StringVectorProperty>

               <IntVectorProperty name="sshow_grid"
                                  label="Show Grid"
                                  initial_string="sshow_grid"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                   Activate/Deactivate the plot grid.
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <DoubleVectorProperty name="slinewidth"
                                     label="Line width "
                                     initial_string="slinewidth"
                                     command="SetParameter"
                                     default_values="1"
                                     number_of_elements="1">
                 <Documentation>
                   Width of the line in the plot.
                 </Documentation>
               </DoubleVectorProperty>

               <IntVectorProperty name="ssmoothdata"
                                  label="Smooth curves"
                                  initial_string="ssmoothdata"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                   Use a spline interpolation to smooth the curves
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="ssmoothorder"
                                  initial_string="ssmoothorder"
                                  label="Smooth Order"
                                  command="SetParameter"
                                  default_values="5"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <Documentation>
                  Set the order for the data smoothing. Default is 5.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="ssmoothdata" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </IntVectorProperty>

               <PropertyGroup label="Plot">
                 <Property name="Variables"/>
                 <Property name="sshow_grid"/>
                 <Property name="slinewidth"/>
                 <Property name="ssmoothdata"/>
                 <Property name="ssmoothorder"/>
               </PropertyGroup>

               <!-- Legend Properties -->
               <IntVectorProperty name="sshow_legend"
                                  label="Show Legend"
                                  initial_string="sshow_legend"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                   Activate/Deactivate the legend.
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="slegend_outside"
                                  label="Legend outside"
                                  initial_string="slegend_outside"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                   If activated, the legend is placed outside the axes 
                   (in reference to the figure).
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="slegend_location"
                                  label="Legend Location"
                                  initial_string="slegend_location"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <EnumerationDomain name="enum">
                  <Entry text="Best"        value="0"  />
                  <Entry text="UpperRight"  value="1"  />
                  <Entry text="UpperLeft"   value="2"  />
                  <Entry text="LowerLeft"   value="3"  />
                  <Entry text="LowerRight"  value="4"  />
                  <Entry text="Right"       value="5"  />
                  <Entry text="CenterLeft"  value="6"  />
                  <Entry text="CenterRight" value="7"  />
                  <Entry text="LowerCenter" value="8"  />
                  <Entry text="UpperCenter" value="9"  />
                  <Entry text="Center"      value="10" />
                </EnumerationDomain>
               </IntVectorProperty>

               <IntVectorProperty name="slegend_font"
                                  initial_string="slegend_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the legend font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="slegend_bold"
                                  initial_string="slegend_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the legend font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="slegend_ital"
                                  initial_string="slegend_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the legend font to italics.
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <PropertyGroup label="Annotation">
                 <Property name="sshow_legend"/>
                 <Property name="slegend_outside"/>
                 <Property name="slegend_location"/>
               </PropertyGroup>

               <PropertyGroup label="Legend Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="slegend_font" function="Size"/>
                 <Property name="slegend_bold" function="Bold"/>
                 <Property name="slegend_ital" function="Italics"/>
               </PropertyGroup>

               <!-- X Axis Properties -->
               <StringVectorProperty name="sx_label"
                                     initial_string="sx_label"
                                     label="X Label "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the X axis label for the plot
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="sx_nticks"
                                  initial_string="sx_nticks"
                                  label="X Number of Ticks "
                                  command="SetParameter"
                                  default_values="10"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <Documentation>
                  Number of ticks in X axis.
                 </Documentation>
               </IntVectorProperty>

               <StringVectorProperty name="sx_tick_form"
                                     initial_string="sx_tick_form"
                                     label="X Tick Format "
                                     command="SetParameter"
                                     default_values="%b %Y - %H:%M"
                                     number_of_elements="1"
                                     panel_visibility="advanced">
                 <Documentation>
                   Format of the X ticks according to the datetime
                   format standards (see strftime)
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="sx_rot"
                                  initial_string="sx_rot"
                                  label="X Tick Rotation "
                                  command="SetParameter"
                                  default_values="90"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <Documentation>
                  Set the X axis tick rotation.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="sx_customrange"
                                  initial_string="sx_customrange"
                                  label="Custom Range X"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set a custom range for the X axis.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <DoubleVectorProperty name="sx_min"
                                     initial_string="sx_min"
                                     label="Minimum Range X"
                                     command="SetParameter"
                                     default_values="0"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range minimum for the X axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="sx_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <DoubleVectorProperty name="sx_max"
                                     initial_string="sx_max"
                                     label="Maximum Range X"
                                     command="SetParameter"
                                     default_values="1"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range maximum for the X axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="sx_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <IntVectorProperty name="sx_font"
                                  initial_string="sx_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="sx_bold"
                                  initial_string="sx_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="sx_ital"
                                  initial_string="sx_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <PropertyGroup label="X Axis">
                 <Property name="sx_nticks"/>
                 <Property name="sx_label"/>
                 <Property name="sx_tick_form"/>
                 <Property name="sx_rot"/>
                 <Property name="sx_customrange"/>
                 <Property name="sx_min"/>
                 <Property name="sx_max"/>
               </PropertyGroup>

               <PropertyGroup label="X Axis Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="sx_font" function="Size"/>
                 <Property name="sx_bold" function="Bold"/>
                 <Property name="sx_ital" function="Italics"/>
               </PropertyGroup>

               <!-- Y axis label -->
               <StringVectorProperty name="sy_label"
                                     initial_string="sy_label"
                                     label="Y Label "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the Y axis label for the plot
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="sy_font"
                                  initial_string="sy_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="sy_bold"
                                  initial_string="sy_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="sy_ital"
                                  initial_string="sy_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="sy_customrange"
                                  initial_string="sy_customrange"
                                  label="Custom Range Y"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set a custom range for the Y axis.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <DoubleVectorProperty name="sy_min"
                                     initial_string="sy_min"
                                     label="Minimum Range Y"
                                     command="SetParameter"
                                     default_values="0"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range minimum for the Y axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="sy_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <DoubleVectorProperty name="sy_max"
                                     initial_string="sy_max"
                                     label="Maximum Range Y"
                                     command="SetParameter"
                                     default_values="1"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range maximum for the Y axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="sy_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <PropertyGroup label="Y Axis">
                 <Property name="sy_label"/>
                 <Property name="sy_customrange"/>
                 <Property name="sy_min"/>
                 <Property name="sy_max"/>
               </PropertyGroup>

               <PropertyGroup label="Y Axis Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="sy_font" function="Size"/>
                 <Property name="sy_bold" function="Bold"/>
                 <Property name="sy_ital" function="Italics"/>
               </PropertyGroup>

               <!-- Save figure properties -->
               <IntVectorProperty name="ssavefigure"
                                  initial_string="ssavefigure"
                                  label="Save Figure"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Indicate whether or not to save the plot
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <StringVectorProperty animateable="0"
                                     command="SetParameter"
                                     name="sfilename"
                                     initial_string="sfilename"
                                     label="File Name"
                                     default_values=""
                                     number_of_elements="1">
                   <FileListDomain name="files" />
                   <Documentation>
                      This property sets the name of the output file to save
                   </Documentation>
                   <Hints>
                      <PropertyWidgetDecorator type="ShowWidgetDecorator">
                        <Property name="ssavefigure" function="boolean" />
                      </PropertyWidgetDecorator>
                      <FileChooser extensions="png" file_description="High quality PNG"/>
                      <FileChooser extensions="pdf" file_description="Vectorized PDF"/>
                      <FileChooser extensions="eps" file_description="Vectorized EPS"/>
                      <AcceptAnyFile/>    
                   </Hints>
               </StringVectorProperty>

               <DoubleVectorProperty name="soutdpi"
                                     initial_string="soutdpi"
                                     label="Output DPI "
                                     command="SetParameter"
                                     default_values="300"
                                     number_of_elements="1">
                 <Documentation>
                  Set the dpi (depth per inch) of the output figure
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="ssavefigure" function="boolean" />
                   </PropertyWidgetDecorator>        
                 </Hints>
               </DoubleVectorProperty>

               <PropertyGroup label="Save Fiure">
                 <Property name="ssavefigure"/>
                 <Property name="sfilename"/>
                 <Property name="soutdpi"/>
               </PropertyGroup>

               <!-- PLOT PYTHON CODE -->

               <StringVectorProperty command="SetScript"
                                     name="Script"
                                     default_values="def setup_data(view):&#xA;&#x9;'''&#xA;&#x9;This function sets up the data to be plotted.&#xA;&#x9;'''&#xA;&#x9;view.EnableAllAttributeArrays()&#xA;def render(view,width,height):&#xA;&#x9;'''&#xA;&#x9;This function decides the type of plot according &#xA;&#x9;to the view type.&#xA;&#xA;&#x9;Needs to be updated every time a plot view is created.&#xA;&#x9;'''&#xA;&#x9;view_type = view.GetClassName()&#xA;&#x9;# Vertical plot&#xA;&#x9;if view_type == &quot;vtkOGSVerticalProfilePlot&quot;:&#xA;&#x9;&#x9;return render_verticalplot(view, width, height)&#xA;&#x9;# Hovmoeller plot&#xA;&#x9;if view_type == &quot;vtkOGSHovmoellerPlot&quot;:&#xA;&#x9;&#x9;return render_hovmoellerplot(view, width, height)&#xA;&#x9;# Spaghetti plot&#xA;&#x9;if view_type == &quot;vtkOGSSpaghettiPlot&quot;:&#xA;&#x9;&#x9;return render_spaghettiplot(view, width, height)&#xA;&#x9;return None&#xA;def smooth(a,WSZ):&#xA;&#x9;'''&#xA;&#x9;Smoothes a 1-D numpy array.&#xA;&#xA;&#x9;WSZ: smoothing window size needs, which must be odd number,&#xA;&#x9;as in the original MATLAB implementation.&#xA;&#x9;'''&#xA;&#x9;import numpy as np&#xA;&#x9;out0  = np.convolve(a,np.ones(WSZ,dtype=int),'valid')/WSZ    &#xA;&#x9;r     = np.arange(1,WSZ-1,2)&#xA;&#x9;start = np.cumsum(a[:WSZ-1])[::2]/r&#xA;&#x9;stop  = (np.cumsum(a[:-WSZ:-1])[::2]/r)[::-1]&#xA;&#x9;return np.concatenate((  start , out0, stop  ))&#xA;def render_spaghettiplot(view, width, height):&#xA;&#x9;'''&#xA;&#x9;Performs spaghetti plots from data.&#xA;&#x9;'''&#xA;&#x9;from paraview import python_view&#xA;&#xA;&#x9;import vtk, numpy as np&#xA;&#x9;from vtk.util import numpy_support as npvtk&#xA;&#x9;from datetime import datetime as dt&#xA;&#xA;&#x9;# Create matplotlib figure&#xA;&#x9;figure = python_view.matplotlib_figure(width, height)&#xA;&#xA;&#x9;# Set up the plot view&#xA;&#x9;ax = figure.add_subplot(1,1,1)&#xA;&#x9;# Title properties&#xA;&#x9;title_loc = 'center'&#xA;&#x9;if splot_title_alig == 0:&#xA;&#x9;&#x9;title_loc = 'left'&#xA;&#x9;if splot_title_alig == 2:&#xA;&#x9;&#x9;title_loc = 'right'&#xA;&#x9;ax.set_title(splot_title,&#xA;&#x9;&#x9;fontsize=splot_title_font,&#xA;&#x9;&#x9;fontweight='bold'    if splot_title_bold else None,&#xA;&#x9;&#x9;style='italic'  if splot_title_ital else None)&#x9;&#x9;&#x9;&#xA;&#x9;# X Axes properties&#xA;&#x9;ax.set_xlabel(sx_label,&#xA;&#x9;&#x9;fontsize=sx_font,&#xA;&#x9;&#x9;fontweight='bold' if sx_bold else None,&#xA;&#x9;&#x9;style='italic' if sx_ital else None)&#xA;&#x9;if sx_customrange: ax.set_xlim((sx_min,sx_max))&#xA;&#x9;# Y Axes properties&#xA;&#x9;ax.set_ylabel(sy_label,&#xA;&#x9;&#x9;fontsize=sy_font,&#xA;&#x9;&#x9;fontweight='bold' if sy_bold else None,&#xA;&#x9;&#x9;style='italic' if sy_ital else None)&#xA;&#x9;if sy_customrange: ax.set_ylim((sy_min,sy_max))&#xA;&#xA;&#x9;if sshow_grid: ax.grid()&#xA;&#xA;&#x9;# Generate variable lists&#xA;&#x9;objlist = [s.split(';')[0] for s in labels.split('\n')] if not labels == '' else []&#xA;&#xA;&#x9;xIdsg   = np.array([])&#xA;&#x9;xNamesg = np.array([])&#xA;&#xA;&#x9;# Plot data&#xA;&#x9;if not view.GetNumberOfVisibleDataObjects() &gt; 0: return python_view.figure_to_image(figure)&#xA;&#x9;for objId in range(view.GetNumberOfVisibleDataObjects()):&#xA;&#x9;&#x9;# Get object that must be a vtkTable&#xA;&#x9;&#x9;obj = view.GetVisibleDataObjectForRendering(objId)&#xA;&#x9;&#x9;if not obj: continue&#xA;&#x9;&#x9;if (obj.GetClassName() != &quot;vtkTable&quot;): continue&#xA;&#x9;&#x9;# Here we have mande sure we are dealing with a vtkTable&#xA;&#x9;&#x9;# Now parse the columns and build the array data&#xA;&#x9;&#x9;var    = []&#xA;&#x9;&#x9;xIds   = []&#xA;&#x9;&#x9;xNames = []&#xA;&#x9;&#x9;# Decide whether to plot the variable&#xA;&#x9;&#x9;do_plot = False if len(objlist) &gt; 0 else True&#xA;&#x9;&#x9;args    = None&#xA;&#x9;&#x9;kwargs  = None&#xA;&#x9;&#x9;for ii in range(0,len(objlist)):&#xA;&#x9;&#x9;&#x9;if &quot;%d&quot; % (objId+1) == &quot;%s&quot; % (objlist[ii]): &#xA;&#x9;&#x9;&#x9;&#x9;do_plot = True&#xA;&#x9;&#x9;&#x9;&#x9;if (len(labels.split('\n')[ii].split(';'))&gt;1):&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;args = labels.split('\n')[ii].split(';')[1]&#xA;&#x9;&#x9;&#x9;&#x9;if (len(labels.split('\n')[ii].split(';'))&gt;2):&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;kwargs = dict(s.split('=') for s in labels.split('\n')[ii].split(';')[2].split(','))&#xA;&#x9;&#x9;# Build the array data&#xA;&#x9;&#x9;if do_plot:&#xA;&#x9;&#x9;&#x9;for cId in range(obj.GetNumberOfColumns()):&#xA;&#x9;&#x9;&#x9;&#x9;# Recover the column&#xA;&#x9;&#x9;&#x9;&#x9;column = obj.GetColumn(cId)&#xA;&#x9;&#x9;&#x9;&#x9;# Else we have a data column&#xA;&#x9;&#x9;&#x9;&#x9;xIds.append( cId )&#xA;&#x9;&#x9;&#x9;&#x9;# Use datetime to format the date&#xA;&#x9;&#x9;&#x9;&#x9;date = dt.strptime(column.GetName(),&quot;%Y%m%d-%H:%M:%S&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;xNames.append( date.strftime(sx_tick_form) )&#xA;&#x9;&#x9;&#x9;&#x9;# Filter zeros and stack the column&#xA;&#x9;&#x9;&#x9;&#x9;val = npvtk.vtk_to_numpy(column)[0]&#xA;&#x9;&#x9;&#x9;&#x9;val = None if val == 0. else val&#xA;&#x9;&#x9;&#x9;&#x9;var.append(val)&#xA;&#x9;&#x9;&#x9;# Convert to numpy array&#xA;&#x9;&#x9;&#x9;z      = np.array(var)&#xA;&#x9;&#x9;&#x9;xIds   = np.array(xIds)&#xA;&#x9;&#x9;&#x9;xNames = np.array(xNames)&#xA;&#x9;&#x9;&#x9;# Smooth if requested&#xA;&#x9;&#x9;&#x9;if ssmoothdata: z = smooth(z,ssmoothorder)&#xA;&#x9;&#x9;&#x9;# Plot&#xA;&#x9;&#x9;&#x9;if args == None:&#xA;&#x9;&#x9;&#x9;&#x9;ax.plot(xIds,z,linewidth=slinewidth)&#xA;&#x9;&#x9;&#x9;elif kwargs == None:&#xA;&#x9;&#x9;&#x9;&#x9;ax.plot(xIds,z,args,linewidth=slinewidth)&#xA;&#x9;&#x9;&#x9;else:&#xA;&#x9;&#x9;&#x9;&#x9;kwargs['linewidth'] = slinewidth&#xA;&#x9;&#x9;&#x9;&#x9;ax.plot(xIds,z,args,**kwargs)&#xA;&#x9;&#x9;&#x9;# Update global variables&#xA;&#x9;&#x9;&#x9;xIdsg   = xIds   if xIds.shape[0]   &gt; xIdsg.shape[0]   else xIdsg&#xA;&#x9;&#x9;&#x9;xNamesg = xNames if xNames.shape[0] &gt; xNamesg.shape[0] else xNamesg&#xA;&#xA;&#x9;# Set x axis&#xA;&#x9;x_ticks = xIdsg if xIdsg.shape[0] &lt; 10 else np.linspace(xIdsg[0],xIdsg[-1],sx_nticks,dtype=np.int)&#xA;&#x9;ax.set_xticks(x_ticks)&#xA;&#x9;ax.set_xticklabels(xNamesg[x_ticks],rotation=sx_rot)&#xA;&#xA;&#x9;# Set tick size&#xA;&#x9;ax.tick_params(axis='x', which='major', labelsize=sx_font)&#xA;&#x9;ax.tick_params(axis='y', which='major', labelsize=sy_font)&#xA;&#xA;&#x9;# Set legend&#xA;&#x9;if sshow_legend: &#xA;&#x9;&#x9;legend_prop = dict(size=slegend_font)&#xA;&#x9;&#x9;if slegend_bold: legend_prop['weight'] = 'bold'&#xA;&#x9;&#x9;if slegend_ital: legend_prop['style']  = 'italic'&#xA;&#x9;&#x9;# Place the legend&#xA;&#x9;&#x9;if slegend_outside:&#xA;&#x9;&#x9;&#x9;figure.legend(loc=slegend_location,prop=legend_prop)&#xA;&#x9;&#x9;else:&#xA;&#x9;&#x9;&#x9;ax.legend(loc=slegend_location,prop=legend_prop)&#xA;&#xA;&#x9;# Fit figure&#xA;&#x9;figure.tight_layout()&#xA;&#xA;&#x9;# Save figure&#xA;&#x9;if ssavefigure and sfilename:&#xA;&#x9;&#x9;# Save figure&#xA;&#x9;&#x9;figure.savefig(sfilename,dpi=soutdpi,bbox_inches='tight')&#xA;&#xA;&#x9;return python_view.figure_to_image(figure)&#xA;"
                                     number_of_elements="1"
                                     panel_visibility="never">
                 <Hints>
                   <Widget type="multi_line" syntax="python"/>
                 </Hints>
                 <Documentation>This property contains the text of a Python program used
                 to generate a plot. Use the TAB key to end editing and generate the
                 plot.</Documentation>
               </StringVectorProperty>

               <!-- OTHER EXPOSED PROPERTIES -->

               <IntVectorProperty command="GetNumberOfVisibleDataObjects"
                                  name="NumberOfVisibleDataObjects"
                                  number_of_elements="1"
                                  default_values="1"
                                  information_only="1"
                                  panel_visibility="never">
           <SimpleIntInformationHelper/>
               </IntVectorProperty>
              <IntVectorProperty command="SetForceUseCache"
                                 default_values="0"
                                 is_internal="1"
                                 name="ForceUseCache"
                                 number_of_elements="1">
                <BooleanDomain name="bool" />
                <Documentation>Typically UseCache and CacheKey are updated by the View
                and representations cache based on what the view tells it. However in
                some cases we may want to force a representation to cache irrespective
                of the view (e.g. comparative views). In which case these ivars can up
                set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
                Instead, ForcedCacheKey is used.</Documentation>
              </IntVectorProperty>
              <DoubleVectorProperty command="SetForcedCacheKey"
                                    default_values="none"
                                    is_internal="1"
                                    name="ForcedCacheKey"
                                    number_of_elements="1">
                <DoubleRangeDomain name="range" />
                <Documentation>Typically UseCache and CacheKey are updated by the View
                and representations cache based on what the view tells it. However in
                some cases we may want to force a representation to cache irrespective
                of the view (e.g. comparative views). In which case these ivars can up
                set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
                Instead, ForcedCacheKey is used.</Documentation>
              </DoubleVectorProperty>

        </OGSSpaghettiPlotProxy>

        <OGSHovmoellerPlotProxy name="OGSHovmoellerPlot" 
                                     class="vtkOGSHovmoellerPlot"
                                     label="OGS Hovmoeller Plot"
                                     processes="client|dataserver|renderserver"
                                     base_proxygroup="internal_views"
                                     base_proxyname="ViewBase"
                                     representation_name="PythonRepresentation">

               <!-- EXPOSED PROPERTIES TO MODIFY THE PLOT -->

               <!-- Title Properties-->
               <StringVectorProperty name="hplot_title"
                                     initial_string="hplot_title"
                                     label="Title "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the title for the plot.
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="hplot_title_font"
                                  initial_string="hplot_title_font"
                                  command="SetParameter"
                                  default_values="14"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="hplot_title_bold"
                                  initial_string="hplot_title_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="hplot_title_ital"
                                  initial_string="hplot_title_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the title font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="hplot_title_alig"
                                  initial_string="hplot_title_alig"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <EnumerationDomain name="enum">
                   <Entry text="Left"   value="0" />
                   <Entry text="Center" value="1" />
                   <Entry text="Right"  value="2" />
                 </EnumerationDomain>
               </IntVectorProperty>

               <PropertyGroup label="Title">
                 <Property name="hplot_title"/>
               </PropertyGroup>
               <PropertyGroup label="Title Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="hplot_title_font" function="Size"/>
                 <Property name="hplot_title_bold" function="Bold"/>
                 <Property name="hplot_title_ital" function="Italics"/>
                 <Property name="hplot_title_alig" function="Justification"/>
               </PropertyGroup>

               <!-- Colormap Properties -->
               <IntVectorProperty name="hdraw_colorbar"
                                  initial_string="hdraw_colorbar"
                                  label="Colorbar"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <Documentation>
                  Activate/Deactivate the colorbar
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="hsel_colormap"
                                  label="Colormap"
                                  initial_string="hsel_colormap"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <EnumerationDomain name="enum">
                  <Entry text="Jet"      value="0"/>
                  <Entry text="Rainbow"  value="1"/>
                  <Entry text="HSV"      value="2"/>
                  <Entry text="Ocean"    value="3"/>
                  <Entry text="Terrain"  value="4"/>
                  <Entry text="CoolWarm" value="5"/>
                  <Entry text="Viridis"  value="6"/>
                  <Entry text="Plasma"   value="7"/>
                  <Entry text="Inferno"  value="8"/>
                </EnumerationDomain>
               </IntVectorProperty>

               <IntVectorProperty name="hsmoothdata"
                                  label="Smooth curves"
                                  initial_string="hsmoothdata"
                                  command="SetParameter"
                                  default_values="1"
                                  number_of_elements="1">
                 <Documentation>
                   Use a spline interpolation to smooth the curves
                 </Documentation>
                 <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="hsmoothorder"
                                  initial_string="hsmoothorder"
                                  label="Smooth Order"
                                  command="SetParameter"
                                  default_values="5"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <Documentation>
                  Set the order for the data smoothing. Default is 5.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="hsmoothdata" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </IntVectorProperty>

               <PropertyGroup label="Colormap">
                 <Property name="hdraw_colorbar"/>
                 <Property name="hsel_colormap"/>
                 <Property name="hsmoothdata"/>
                 <Property name="hsmoothorder"/>
               </PropertyGroup>

               <!-- X Axis Properties -->
               <StringVectorProperty name="hx_label"
                                     initial_string="hx_label"
                                     label="X Label "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the X axis label for the plot
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="hx_nticks"
                                  initial_string="hx_nticks"
                                  label="X Number of Ticks "
                                  command="SetParameter"
                                  default_values="10"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <Documentation>
                  Number of ticks in X axis.
                 </Documentation>
               </IntVectorProperty>

               <StringVectorProperty name="hx_tick_form"
                                     initial_string="hx_tick_form"
                                     label="X Tick Format "
                                     command="SetParameter"
                                     default_values="%b %Y - %H:%M"
                                     number_of_elements="1"
                                     panel_visibility="advanced">
                 <Documentation>
                   Format of the X ticks according to the datetime
                   format standards (see strftime)
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="hx_rot"
                                  initial_string="hx_rot"
                                  label="X Tick Rotation "
                                  command="SetParameter"
                                  default_values="90"
                                  number_of_elements="1"
                                  panel_visibility="advanced">
                 <Documentation>
                  Set the X axis tick rotation.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="hx_font"
                                  initial_string="hx_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="hx_bold"
                                  initial_string="hx_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="hx_ital"
                                  initial_string="hx_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the X axis font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <PropertyGroup label="X Axis">
                 <Property name="hx_nticks"/>
                 <Property name="hx_label"/>
                 <Property name="hx_tick_form"/>
                 <Property name="hx_rot"/>
               </PropertyGroup>

               <PropertyGroup label="X Axis Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="hx_font" function="Size"/>
                 <Property name="hx_bold" function="Bold"/>
                 <Property name="hx_ital" function="Italics"/>
               </PropertyGroup>

               <!-- Y axis label -->
               <StringVectorProperty name="hy_label"
                                     initial_string="hy_label"
                                     label="Y Label "
                                     command="SetParameter"
                                     default_values=""
                                     number_of_elements="1">
                 <Documentation>
                   Set the Y axis label for the plot
                 </Documentation>
               </StringVectorProperty>

               <IntVectorProperty name="hy_font"
                                  initial_string="hy_font"
                                  command="SetParameter"
                                  default_values="12"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font size.
                 </Documentation>
               </IntVectorProperty>

               <IntVectorProperty name="hy_bold"
                                  initial_string="hy_bold"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font to bold.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="hy_ital"
                                  initial_string="hy_ital"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set the Y axis font to italics.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <IntVectorProperty name="hy_customrange"
                                  initial_string="hy_customrange"
                                  label="Custom Range Y"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Set a custom range for the Y axis.
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <DoubleVectorProperty name="hy_min"
                                     initial_string="hy_min"
                                     label="Minimum Range Y"
                                     command="SetParameter"
                                     default_values="0"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range minimum for the Y axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="hy_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <DoubleVectorProperty name="hy_max"
                                     initial_string="hy_max"
                                     label="Maximum Range Y"
                                     command="SetParameter"
                                     default_values="1"
                                     number_of_elements="1">
                 <Documentation>
                  Set the axis range maximum for the Y axis.
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="hy_customrange" function="boolean" />
                   </PropertyWidgetDecorator>
                 </Hints>
               </DoubleVectorProperty>

               <PropertyGroup label="Y Axis">
                 <Property name="hy_label"/>
               </PropertyGroup>

               <PropertyGroup label="Y Axis Properties"
                              panel_widget="FontEditor"
                              panel_visibility="advanced">
                 <Property name="hy_font" function="Size"/>
                 <Property name="hy_bold" function="Bold"/>
                 <Property name="hy_ital" function="Italics"/>
               </PropertyGroup>

               <PropertyGroup label="Y Axis Range">
                 <Property name="hy_customrange"/>
                 <Property name="hy_min"/>
                 <Property name="hy_max"/>
               </PropertyGroup>

               <!-- Save figure properties -->
               <IntVectorProperty name="hsavefigure"
                                  initial_string="hsavefigure"
                                  label="Save Figure"
                                  command="SetParameter"
                                  default_values="0"
                                  number_of_elements="1">
                 <Documentation>
                  Indicate whether or not to save the plot
                </Documentation>
                <BooleanDomain name="bool" />
               </IntVectorProperty>

               <StringVectorProperty animateable="0"
                                     command="SetParameter"
                                     name="hfilename"
                                     initial_string="hfilename"
                                     label="File Name"
                                     default_values=""
                                     number_of_elements="1">
                   <FileListDomain name="files" />
                   <Documentation>
                      This property sets the name of the output file to save
                   </Documentation>
                   <Hints>
                      <PropertyWidgetDecorator type="ShowWidgetDecorator">
                        <Property name="hsavefigure" function="boolean" />
                      </PropertyWidgetDecorator>
                      <FileChooser extensions="png" file_description="High quality PNG"/>
                      <FileChooser extensions="pdf" file_description="Vectorized PDF"/>
                      <FileChooser extensions="eps" file_description="Vectorized EPS"/>
                      <AcceptAnyFile/>    
                   </Hints>
               </StringVectorProperty>

               <DoubleVectorProperty name="houtdpi"
                                     initial_string="houtdpi"
                                     label="Output DPI "
                                     command="SetParameter"
                                     default_values="300"
                                     number_of_elements="1">
                 <Documentation>
                  Set the dpi (depth per inch) of the output figure
                 </Documentation>
                 <Hints>
                   <PropertyWidgetDecorator type="ShowWidgetDecorator">
                     <Property name="hsavefigure" function="boolean" />
                   </PropertyWidgetDecorator>        
                 </Hints>
               </DoubleVectorProperty>

               <PropertyGroup label="Save Fiure">
                 <Property name="hsavefigure"/>
                 <Property name="hfilename"/>
                 <Property name="houtdpi"/>
               </PropertyGroup>

               <!-- PLOT PYTHON CODE -->

               <StringVectorProperty command="SetScript"
                                     name="Script"
                                     default_values="def setup_data(view):&#xA;&#x9;'''&#xA;&#x9;This function sets up the data to be plotted.&#xA;&#x9;'''&#xA;&#x9;view.EnableAllAttributeArrays()&#xA;def render(view,width,height):&#xA;&#x9;'''&#xA;&#x9;This function decides the type of plot according &#xA;&#x9;to the view type.&#xA;&#xA;&#x9;Needs to be updated every time a plot view is created.&#xA;&#x9;'''&#xA;&#x9;view_type = view.GetClassName()&#xA;&#x9;# Vertical plot&#xA;&#x9;if view_type == &quot;vtkOGSVerticalProfilePlot&quot;:&#xA;&#x9;&#x9;return render_verticalplot(view, width, height)&#xA;&#x9;# Hovmoeller plot&#xA;&#x9;if view_type == &quot;vtkOGSHovmoellerPlot&quot;:&#xA;&#x9;&#x9;return render_hovmoellerplot(view, width, height)&#xA;&#x9;# Spaghetti plot&#xA;&#x9;if view_type == &quot;vtkOGSSpaghettiPlot&quot;:&#xA;&#x9;&#x9;return render_spaghettiplot(view, width, height)&#xA;&#x9;return None&#xA;def smooth(a,WSZ):&#xA;&#x9;'''&#xA;&#x9;Smoothes a 1-D numpy array.&#xA;&#xA;&#x9;WSZ: smoothing window size needs, which must be odd number,&#xA;&#x9;as in the original MATLAB implementation.&#xA;&#x9;'''&#xA;&#x9;import numpy as np&#xA;&#x9;out0  = np.convolve(a,np.ones(WSZ,dtype=int),'valid')/WSZ    &#xA;&#x9;r     = np.arange(1,WSZ-1,2)&#xA;&#x9;start = np.cumsum(a[:WSZ-1])[::2]/r&#xA;&#x9;stop  = (np.cumsum(a[:-WSZ:-1])[::2]/r)[::-1]&#xA;&#x9;return np.concatenate((  start , out0, stop  ))&#xA;def render_hovmoellerplot(view, width, height):&#xA;&#x9;'''&#xA;&#x9;Performs Hovmoeller plots from data.&#xA;&#x9;'''&#xA;&#x9;from paraview import python_view&#xA;&#x9;from matplotlib import cm as cm&#xA;&#xA;&#x9;import vtk, numpy as np&#xA;&#x9;from vtk.util import numpy_support as npvtk&#xA;&#x9;from datetime import datetime as dt&#xA;&#xA;&#x9;# Create matplotlib figure&#xA;&#x9;figure = python_view.matplotlib_figure(width, height)&#xA;&#xA;&#x9;# Set up the plot view&#xA;&#x9;ax = figure.add_subplot(1,1,1)&#xA;&#x9;# Title properties&#xA;&#x9;title_loc = 'center'&#xA;&#x9;if hplot_title_alig == 0:&#xA;&#x9;&#x9;title_loc = 'left'&#xA;&#x9;if hplot_title_alig == 2:&#xA;&#x9;&#x9;title_loc = 'right'&#xA;&#x9;ax.set_title(hplot_title,&#xA;&#x9;&#x9;fontsize=hplot_title_font,&#xA;&#x9;&#x9;fontweight='bold'    if hplot_title_bold else None,&#xA;&#x9;&#x9;style='italic'  if hplot_title_ital else None)&#xA;&#x9;# X Axes properties&#xA;&#x9;ax.set_xlabel(hx_label,&#xA;&#x9;&#x9;fontsize=hx_font,&#xA;&#x9;&#x9;fontweight='bold' if hx_bold else None,&#xA;&#x9;&#x9;style='italic' if hx_ital else None)&#xA;&#x9;# Y Axes properties&#xA;&#x9;ax.set_ylabel(hy_label,&#xA;&#x9;&#x9;fontsize=hy_font,&#xA;&#x9;&#x9;fontweight='bold' if hy_bold else None,&#xA;&#x9;&#x9;style='italic' if hy_ital else None)&#xA;&#x9;if hy_customrange: ax.set_ylim((hy_min,hy_max))&#xA;&#xA;&#x9;# Plot data&#xA;&#x9;# Only get the first visible object, which should be a vtkTable&#xA;&#x9;if not view.GetNumberOfVisibleDataObjects() &gt; 0: return python_view.figure_to_image(figure)&#xA;&#xA;&#x9;obj = view.GetVisibleDataObjectForRendering(0)&#xA;&#x9;if not obj: return python_view.figure_to_image(figure)&#xA;&#x9;if (obj.GetClassName() != &quot;vtkTable&quot;): return python_view.figure_to_image(figure)&#xA;&#xA;&#x9;# Here we have mande sure we are dealing with a vtkTable&#xA;&#x9;# Now parse the columns and build the matrix data&#xA;&#x9;col_stack = []&#xA;&#x9;xIds      = []&#xA;&#x9;xNames    = []&#xA;&#xA;&#x9;for cId in range(obj.GetNumberOfColumns()):&#xA;&#x9;&#x9;# Recover the column&#xA;&#x9;&#x9;column = obj.GetColumn(cId)&#xA;&#x9;&#x9;# Deal with the depth column&#xA;&#x9;&#x9;if column.GetName() == &quot;depth&quot;:&#xA;&#x9;&#x9;&#x9;depth = -npvtk.vtk_to_numpy(column)&#xA;&#x9;&#x9;&#x9;continue&#xA;&#x9;&#x9;# Else we have a data column&#xA;&#x9;&#x9;xIds.append( cId )&#xA;&#x9;&#x9;# Use datetime to format the date&#xA;&#x9;&#x9;date = dt.strptime(column.GetName(),&quot;%Y%m%d-%H:%M:%S&quot;)&#xA;&#x9;&#x9;xNames.append( date.strftime(hx_tick_form) )&#xA;&#x9;&#x9;# Filter zeros and stack the column&#xA;&#x9;&#x9;var = npvtk.vtk_to_numpy(column)&#xA;&#x9;&#x9;var[var == 0.] = None&#xA;&#x9;&#x9;# Algorithm to smooth data&#xA;&#x9;&#x9;if hsmoothdata: var = smooth(var,hsmoothorder)&#xA;&#x9;&#x9;col_stack.append( var )&#xA;&#xA;&#x9;z      = np.column_stack(col_stack)&#xA;&#x9;xIds   = np.array(xIds)&#xA;&#x9;xNames = np.array(xNames)&#xA;&#xA;&#x9;# Colormap selection&#xA;&#x9;cmap = cm.coolwarm&#xA;&#x9;if hsel_colormap == 0: cmap = cm.jet&#xA;&#x9;if hsel_colormap == 1: cmap = cm.rainbow&#xA;&#x9;if hsel_colormap == 2: cmap = cm.hsv&#xA;&#x9;if hsel_colormap == 3: cmap = cm.ocean&#xA;&#x9;if hsel_colormap == 4: cmap = cm.terrain&#xA;&#x9;if hsel_colormap == 5: cmap = cm.coolwarm&#xA;&#x9;if hsel_colormap == 6: cmap = cm.viridis&#xA;&#x9;if hsel_colormap == 7: cmap = cm.plasma&#xA;&#x9;if hsel_colormap == 8: cmap = cm.inferno&#xA;&#xA;&#x9;# Plot and colorbar&#xA;&#x9;z_min = np.nanmin(z)&#xA;&#x9;z_max = np.nanmax(z)&#xA;&#x9;ctf = ax.contourf(xIds,depth,z,cmap=cmap,levels=np.linspace(z_min,z_max,256))&#xA;&#x9;if hdraw_colorbar: &#xA;&#x9;&#x9;cbar = figure.colorbar(ctf)&#xA;&#x9;&#x9;cbar.set_ticks(np.linspace(z_min,z_max,10))&#xA;&#xA;&#x9;# Set x axis&#xA;&#x9;x_ticks = xIds if xIds.shape[0] &lt; 10 else np.linspace(xIds[0],xIds[-1],hx_nticks,dtype=np.int)&#xA;&#x9;ax.set_xticks(x_ticks)&#xA;&#x9;ax.set_xticklabels(xNames[x_ticks],rotation=hx_rot)&#xA;&#xA;&#x9;# Invert the Y axis&#xA;&#x9;ax.invert_yaxis()&#xA;&#xA;&#x9;# Set tick size&#xA;&#x9;ax.tick_params(axis='x', which='major', labelsize=hx_font)&#xA;&#x9;ax.tick_params(axis='y', which='major', labelsize=hy_font)&#xA;&#x9;cbar.ax.tick_params(labelsize=hy_font)&#xA;&#xA;&#x9;# Fit figure&#xA;&#x9;figure.tight_layout()&#xA;&#xA;&#x9;# Save figure&#xA;&#x9;if hsavefigure and hfilename:&#xA;&#x9;&#x9;# Fix ugly white lines in PDF&#xA;&#x9;&#x9;for c in ctf.collections: c.set_edgecolor(&quot;face&quot;)&#xA;&#x9;&#x9;# Save figure&#xA;&#x9;&#x9;figure.savefig(hfilename,dpi=houtdpi,bbox_inches='tight')&#xA;&#xA;&#x9;return python_view.figure_to_image(figure)&#xA;"
                                     number_of_elements="1"
                                     panel_visibility="never">
                 <Hints>
                   <Widget type="multi_line" syntax="python"/>
                 </Hints>
                 <Documentation>This property contains the text of a Python program used
                 to generate a plot. Use the TAB key to end editing and generate the
                 plot.</Documentation>
               </StringVectorProperty>

               <!-- OTHER EXPOSED PROPERTIES -->

               <IntVectorProperty command="GetNumberOfVisibleDataObjects"
                                  name="NumberOfVisibleDataObjects"
                                  number_of_elements="1"
                                  default_values="1"
                                  information_only="1"
                                  panel_visibility="never">
           <SimpleIntInformationHelper/>
               </IntVectorProperty>
              <IntVectorProperty command="SetForceUseCache"
                                 default_values="0"
                                 is_internal="1"
                                 name="ForceUseCache"
                                 number_of_elements="1">
                <BooleanDomain name="bool" />
                <Documentation>Typically UseCache and CacheKey are updated by the View
                and representations cache based on what the view tells it. However in
                some cases we may want to force a representation to cache irrespective
                of the view (e.g. comparative views). In which case these ivars can up
                set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
                Instead, ForcedCacheKey is used.</Documentation>
              </IntVectorProperty>
              <DoubleVectorProperty command="SetForcedCacheKey"
                                    default_values="none"
                                    is_internal="1"
                                    name="ForcedCacheKey"
                                    number_of_elements="1">
                <DoubleRangeDomain name="range" />
                <Documentation>Typically UseCache and CacheKey are updated by the View
                and representations cache based on what the view tells it. However in
                some cases we may want to force a representation to cache irrespective
                of the view (e.g. comparative views). In which case these ivars can up
                set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
                Instead, ForcedCacheKey is used.</Documentation>
              </DoubleVectorProperty>

        </OGSHovmoellerPlotProxy>
    </ProxyGroup>
    <!-- here is your other stuff -->
</ServerManagerConfiguration>